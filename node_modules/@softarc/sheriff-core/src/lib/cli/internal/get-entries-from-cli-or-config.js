"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_PROJECT_NAME = void 0;
exports.getEntriesFromCliOrConfig = getEntriesFromCliOrConfig;
const getFs_1 = __importDefault(require("../../fs/getFs"));
const init_1 = require("../../main/init");
const parse_config_1 = require("../../config/parse-config");
const fs_path_1 = require("../../file-info/fs-path");
const is_empty_record_1 = require("../../util/is-empty-record");
const parse_entry_points_from_cli_1 = require("./parse-entry-points-from-cli");
exports.DEFAULT_PROJECT_NAME = 'default';
function getEntriesFromCliOrConfig(
/**
 * the CLI forwards either the entry file e.g. "src/main.ts" or
 * the entry point(s) e.g. app-i,app-ii
 */
entryFileOrEntryPoints = '', runInit = true) {
    const fs = (0, getFs_1.default)();
    const potentialConfigFile = fs.join(fs.cwd(), 'sheriff.config.ts');
    /**
     * CLI argument given
     */
    if (entryFileOrEntryPoints) {
        // CLI argument given and no config file is present -> only entry file can work
        if (!fs.exists(potentialConfigFile)) {
            return processEntryFile(entryFileOrEntryPoints, runInit, fs);
        }
        if (fs.exists(potentialConfigFile)) {
            // two cases to check: check for entry points otherwise it is an entry file
            const sheriffConfig = (0, parse_config_1.parseConfig)(potentialConfigFile);
            const potentialEntryPoints = (0, parse_entry_points_from_cli_1.parseEntryPointsFromCli)(entryFileOrEntryPoints, sheriffConfig);
            if (potentialEntryPoints) {
                // if entry points are given, return them
                return processEntryFile(potentialEntryPoints, runInit, fs);
            }
            else {
                // otherwise it is an entry file
                return processEntryFile(entryFileOrEntryPoints, runInit, fs);
            }
        }
    }
    if (fs.exists(potentialConfigFile)) {
        const sheriffConfig = (0, parse_config_1.parseConfig)(potentialConfigFile);
        if (sheriffConfig.entryFile) {
            return processEntryFile(sheriffConfig.entryFile, runInit, fs);
        }
        else if (sheriffConfig.entryPoints &&
            !(0, is_empty_record_1.isEmptyRecord)(sheriffConfig.entryPoints)) {
            return processEntryFile(sheriffConfig.entryPoints, runInit, fs);
        }
        else {
            throw new Error('No entry file or entry points found in sheriff.config.ts. Please provide the option via the CLI.');
        }
    }
    throw new Error('Please provide an entry file (e.g. main.ts) or entry points (e.g. { projectName: "main.ts" })');
}
// Helper function to process entry file consistently
function processEntryFile(entryFileValue, runInit, fs) {
    if (typeof entryFileValue === 'string') {
        return runInit
            ? [
                {
                    projectName: exports.DEFAULT_PROJECT_NAME,
                    entryFile: entryFileValue,
                    projectInfo: (0, init_1.init)((0, fs_path_1.toFsPath)(fs.join(fs.cwd(), entryFileValue))),
                },
            ]
            : [{ projectName: exports.DEFAULT_PROJECT_NAME, entryFile: entryFileValue }];
    }
    else {
        const entries = Object.entries(entryFileValue);
        return runInit
            ? entries.map(([projectName, entry]) => ({
                projectName,
                entryFile: entry,
                projectInfo: (0, init_1.init)((0, fs_path_1.toFsPath)(fs.join(fs.cwd(), entry))),
            }))
            : entries.map(([projectName, entry]) => ({
                projectName,
                entryFile: entry,
            }));
    }
}
//# sourceMappingURL=get-entries-from-cli-or-config.js.map