"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseEntryPointsFromCli = parseEntryPointsFromCli;
const is_empty_record_1 = require("../../util/is-empty-record");
function parseEntryPointsFromCli(entryFileOrEntryPoints, sheriffConfig) {
    const entryPointsFromConfig = sheriffConfig.entryPoints;
    if (entryFileOrEntryPoints.includes(',')) {
        if (!entryPointsFromConfig || (0, is_empty_record_1.isEmptyRecord)(entryPointsFromConfig)) {
            return undefined;
        }
        const splittedEntries = entryFileOrEntryPoints.split(',');
        const entryPoints = {};
        for (const entry of splittedEntries) {
            const trimmedEntry = entry.trim();
            const entryPoint = entryPointsFromConfig[trimmedEntry];
            if (entryPoint) {
                entryPoints[trimmedEntry] = entryPoint;
            }
        }
        return entryPoints;
    }
    // If no comma is found, it could be a single entry point
    if (entryPointsFromConfig &&
        entryFileOrEntryPoints in entryPointsFromConfig) {
        const singleEntryPoint = entryPointsFromConfig[entryFileOrEntryPoints];
        return { [entryFileOrEntryPoints]: singleEntryPoint };
    }
    return undefined;
}
//# sourceMappingURL=parse-entry-points-from-cli.js.map